name: 'Deploy Code into AWS'
on: [push, workflow_dispatch]
jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install Dependecies
        run: npm ci
      # Check if the PM2 process named "Server" is running
      - name: Check PM2 Process Status
        id: check_pm2_status
        run: |
          pm2 show Server > /dev/null 2>&1
          echo "Process found"
          exit 0
        continue-on-error: true

      # Stop the PM2 process named "Server" if it's running
      - name: Stop PM2 Process
        if: steps.check_pm2_status.outcome == 'success'
        run: pm2 stop Server || true
      - name: Start Backend server
        env:
          NODE_ENV: production
        run: |
          pm2 start index.js --name "Server"
          pm2 save
      - name: Check for Changes in Client Folder
        id: check_client_changes
        run: |
          if [ -n "$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^client/')" ]; then
            echo "Changes detected in the 'client' folder"
            echo ::set-output name=result::true
          else
            echo "No changes detected in the 'client' folder"
            echo ::set-output name=result::false
          fi
      - name: Move to ReactJS Folder
        run: cd client
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: yarn-deps-${{ hashFiles('**/yarn.lock') }}
      - name: Install React Dependencies
        if: steps.check_client_changes.outputs.result == 'true'
        run: |
          cd client
          yarn install --frozen-lockfile
      - name: Build the React code
        if: steps.check_client_changes.outputs.result == 'true'
        run: |
          cd client
          npm run build
      - name: Copy Build Files to Nginx Container
        if: steps.check_client_changes.outputs.result == 'true'
        run: |
          cd client
          cp -r build/* /var/www/myblogapp.com
      - name: Start mongodb
        run: sudo systemctl start mongod
